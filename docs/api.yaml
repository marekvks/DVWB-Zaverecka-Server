openapi: 3.0.3
info:
  title: Blog API
  version: 1.0.0
  description: This is the API documentation for the Blog application.
tags:
  - name: auth
    description: Authentication and Authorization
    externalDocs:
      description: Find out more
      url: https://github.com/marekvks/DVWB-Zaverecka-Server
paths:
  /auth/authorized:
    get:
      tags:
        - auth
      summary: Check if user is authorized
      description: Validate the access token to check if the user is authorized.
      operationId: CheckAuthorization
      responses:
        '200':
          description: User is authorized
        '401':
          description: Unauthorized
      x-middlewares:
        - name: validateAccessToken
          description: Validates the access token

  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Register a new user with email, username, and password.
      operationId: RegisterUser
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
        '409':
          description: User already exists
      x-middlewares:
        - name: validateEmail
          description: Validates the email address
        - name: validateUsername
          description: Validates the username
        - name: validatePassword
          description: Validates the password
        - name: userAlreadyExists
          description: Checks if a user with the same email or username already exists

  /auth/login:
    post:
      tags:
        - auth
      summary: Login a user
      description: Authenticate a user with email and password.
      operationId: LoginUser
      requestBody:
        description: User login data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Invalid email or password
      x-middlewares:
        - name: validateLoginData
          description: Validates the login data

  /auth/logout:
    delete:
      tags:
        - auth
      summary: Logout a user
      description: Logout the user and invalidate their session.
      operationId: LogoutUser
      responses:
        '204':
          description: User logged out successfully

  /auth/accessToken:
    get:
      tags:
        - auth
      summary: Get new access token
      description: Generate a new access token using a refresh token.
      operationId: GetNewAccessToken
      responses:
        '200':
          description: New access token generated
        '401':
          description: Invalid or expired refresh token
      x-middlewares:
        - name: validateRefreshToken
          description: Validates the refresh token

  /auth/refreshToken:
    get:
      tags:
        - auth
      summary: Check refresh token
      description: Check the refresh token and send a new one if it expires in less than 7 days.
      operationId: CheckRefreshToken
      responses:
        '200':
          description: Refresh token is valid
        '401':
          description: Invalid or expired refresh token
      x-middlewares:
        - name: validateRefreshToken
          description: Validates the refresh token

  /auth/refreshPasswordCode:
    post:
      tags:
        - auth
      summary: Request password reset code
      description: Send a code to reset the user's password.
      operationId: RequestPasswordResetCode
      requestBody:
        description: User email for password reset
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: Password reset code sent
        '400':
          description: Invalid email
      x-middlewares:
        - name: validateEmail
          description: Validates the email address

  /auth/checkForgotPasswordCode:
    post:
      tags:
        - auth
      summary: Check forgotten password code
      description: Validate the code for password reset.
      operationId: CheckForgotPasswordCode
      requestBody:
        description: Email and code for password reset
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordCode'
      responses:
        '200':
          description: Code is valid
        '400':
          description: Invalid email or code
      x-middlewares:
        - name: validateEmail
          description: Validates the email address
        - name: validateForgotPasswordCode
          description: Validates the password reset code

  /auth/updatePassword:
  patch:
    tags:
      - auth
    summary: Update forgotten password
    description: Update the user's password using the valid reset code.
    operationId: UpdatePassword
    requestBody:
      description: New password and confirmation
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePassword'
    responses:
      '204':
        description: Password updated successfully
      '400':
        description: Invalid password or code
    x-middlewares:
      - name: validateEmail
        description: Validates the email address
      - name: validateForgotPasswordCode
        description: Validates the password reset code
      - name: validatePassword
        description: Validates the new password

/blogPost/user/{id}:
  get:
    summary: Retrieve blog posts by user ID
    description: Retrieve blog posts authored by a specific user based on their ID.
    tags:
      - blogPost
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the user whose blog posts are to be retrieved.
    responses:
      '200':
        description: Blog posts retrieved successfully
      '400':
        description: Invalid user ID
      '404':
        description: No blog posts found for the specified user

/comment/add:
    post:
      tags:
        - comment
      summary: Add a comment to a blog post
      description: Add a new comment to a specific blog post.
      operationId: AddComment
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddComment'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid user ID or blog post ID
        '404':
          description: User or blog post not found
        '500':
          description: Internal server error

/comment/fromPost/{id}:
  get:
    tags:
      - comment
    summary: Get comments from a blog post
    description: Retrieve all comments associated with a specific blog post.
    operationId: GetCommentsFromPost
    parameters:
      - in: path
        name: id
        required: true
        description: ID of the blog post
        schema:
          type: integer
    responses:
      '200':
        description: Comments retrieved successfully
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
      '404':
        description: No comments found for the blog post
      '500':
        description: Internal server error

  /user/@me:
    get:
      summary: Get current user details
      description: Retrieve details of the currently authenticated user.
      tags:
        - user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /user/@me:
  patch:
    summary: Update current user details
    description: Update the details of the currently authenticated user.
    tags:
      - user
    security:
      - cookieAuth: []
    requestBody:
      description: User details to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegistration'
    responses:
      '200':
        description: User details updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      '400':
        description: Invalid request payload
      '401':
        description: Unauthorized
      '404':
        description: User not found
      '500':
        description: Internal server error

  /user/@me/password:
    patch:
      summary: Update current user password
      description: Update the password of the currently authenticated user.
      tags:
        - user
      security:
        - cookieAuth: []
      requestBody:
        description: New password and confirmation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
      responses:
        '204':
          description: Password updated successfully
        '400':
          description: Invalid password or code
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /user/@me/avatar:
    get:
      summary: Get current user's avatar
      description: Retrieve the avatar of the currently authenticated user.
      tags:
        - user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Avatar retrieved successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /user/id/{id}/avatar:
    get:
      summary: Get user's avatar by ID
      description: Retrieve the avatar of a user by their ID.
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Avatar retrieved successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: User not found
        '500':
          description: Internal server error

  /user/@me/avatar:
    patch:
      summary: Change current user's avatar
      description: Change the avatar of the currently authenticated user.
      tags:
        - user
      security:
        - cookieAuth: []
      requestBody:
        description: Avatar image file
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  avatar:
                    type: string
        '400':
          description: No file uploaded
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /user/id/{id}:
    get:
      summary: Get user by ID
      description: Retrieve user details by their ID.
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID
        '404':
          description: User not found
        '500':
          description: Internal server error

  /user/{username}:
    get:
      summary: Get user by username
      description: Retrieve user details by their username.
      tags:
        - user
      parameters:
        - in: path
          name: username
          required: true
          description: Username of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

components:
  schemas:
    UserRegistration:
      type: object
      properties:
        username:
          type: string
          minLength: 4
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
    ForgotPasswordCode:
      type: object
      properties:
        email:
          type: string
          format: email
        refreshCode:
          type: string
    UpdatePassword:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string
