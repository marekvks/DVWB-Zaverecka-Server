generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id_user                                   Int                      @id @default(autoincrement())
  username                                  String                   @unique
  firstName                                 String?                  @db.VarChar(16)
  lastName                                  String?                  @db.VarChar(16)
  email                                     String                   @unique @db.VarChar(64)
  password                                  String                   @db.VarChar(128)
  role                                      role                     @default(USER)
  avatarPath                                String?
  passwordVersion                           Int
  blogPosts                                 blogPost[]               @relation("Author")
  comment                                   comment[]
  refresh_password_tokens                   refresh_password_tokens?
  user_follow_user_follow_id_followedTouser user_follow[]            @relation("user_follow_id_followedTouser")
  user_follow_user_follow_id_followerTouser user_follow[]            @relation("user_follow_id_followerTouser")
}

model blogPost {
  id_blogpost String     @id @unique @default(uuid())
  date        DateTime   @default(now())
  lastUpdated DateTime   @updatedAt
  title       String
  description String
  content     String
  id_author   Int
  autohor     user       @relation("Author", fields: [id_author], references: [id_user], onDelete: Cascade)
  comment     comment[]
  categories  category[] @relation("blogPostTocategory")
  likes       Int        @default(0)
}

model category {
  id    Int        @id @default(autoincrement())
  name  String
  posts blogPost[] @relation("blogPostTocategory")
}

model refresh_password_tokens {
  id_token   Int     @id @default(autoincrement())
  token      String?
  id_user    Int     @unique
  expires_at BigInt?
  used       Boolean
  user       user    @relation(fields: [id_user], references: [id_user], onDelete: Cascade, onUpdate: NoAction)
}

model comment {
  id_comment  Int      @unique @default(autoincrement())
  content     String
  date        DateTime @default(now())
  id_author   Int
  id_blogpost String
  user        user     @relation(fields: [id_author], references: [id_user], onDelete: Cascade, onUpdate: NoAction)
  blogPost    blogPost @relation(fields: [id_blogpost], references: [id_blogpost], onDelete: Cascade, onUpdate: NoAction)
}

model user_follow {
  id_follow                          Int  @unique @default(autoincrement())
  id_follower                        Int
  id_followed                        Int
  user_user_follow_id_followedTouser user @relation("user_follow_id_followedTouser", fields: [id_followed], references: [id_user], onDelete: Cascade, onUpdate: NoAction)
  user_user_follow_id_followerTouser user @relation("user_follow_id_followerTouser", fields: [id_follower], references: [id_user], onDelete: Cascade, onUpdate: NoAction)
}

enum role {
  USER
  ADMIN
}
